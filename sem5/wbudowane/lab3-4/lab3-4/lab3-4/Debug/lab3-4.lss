
lab3-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8f  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000489  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000559  00000000  00000000  00002115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wypisz>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	92 60       	ori	r25, 0x02	; 2
  96:	9b bb       	out	0x1b, r25	; 27
  98:	9b b3       	in	r25, 0x1b	; 27
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	92 2b       	or	r25, r18
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	00 00       	nop
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	92 60       	ori	r25, 0x02	; 2
  b0:	9b bb       	out	0x1b, r25	; 27
  b2:	20 e1       	ldi	r18, 0x10	; 16
  b4:	82 9f       	mul	r24, r18
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <wypisz+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <wypisz+0x3e>
  d0:	08 95       	ret

000000d2 <LCD_clear>:
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	87 e9       	ldi	r24, 0x97	; 151
  e6:	9a e3       	ldi	r25, 0x3A	; 58
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_clear+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_clear+0x1c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <inicjalizacjaLCD>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	1b ba       	out	0x1b, r1	; 27
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	81 60       	ori	r24, 0x01	; 1
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	8b bb       	out	0x1b, r24	; 27
 122:	8c e0       	ldi	r24, 0x0C	; 12
 124:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_clear>
 132:	08 95       	ret

00000134 <ustawKursor>:
 134:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 138:	9b b3       	in	r25, 0x1b	; 27
 13a:	9e 7f       	andi	r25, 0xFE	; 254
 13c:	9b bb       	out	0x1b, r25	; 27
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	89 9f       	mul	r24, r25
 142:	60 0d       	add	r22, r0
 144:	11 24       	eor	r1, r1
 146:	86 2f       	mov	r24, r22
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8b bb       	out	0x1b, r24	; 27
 154:	81 ee       	ldi	r24, 0xE1	; 225
 156:	94 e0       	ldi	r25, 0x04	; 4
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <ustawKursor+0x24>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <ustawKursor+0x2a>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <napisz>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
 16c:	d6 2f       	mov	r29, r22
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	0f c0       	rjmp	.+30     	; 0x190 <napisz+0x2e>
 172:	c0 31       	cpi	r28, 0x10	; 16
 174:	21 f4       	brne	.+8      	; 0x17e <napisz+0x1c>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 9a 00 	call	0x134	; 0x134 <ustawKursor>
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	f1 1d       	adc	r31, r1
 184:	c7 fd       	sbrc	r28, 7
 186:	fa 95       	dec	r31
 188:	80 81       	ld	r24, Z
 18a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 18e:	cf 5f       	subi	r28, 0xFF	; 255
 190:	cd 17       	cp	r28, r29
 192:	7c f3       	brlt	.-34     	; 0x172 <napisz+0x10>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <pisz_1>:
	napisz(spacje,15);
	_delay_ms(60);
}

void pisz_1(char *tekst, int8_t dlugosc)
{
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	16 2f       	mov	r17, r22
	ustawKursor(0,0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 9a 00 	call	0x134	; 0x134 <ustawKursor>
	napisz(tekst, dlugosc);
 1b0:	61 2f       	mov	r22, r17
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 b1 00 	call	0x162	; 0x162 <napisz>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <pisz_2>:

void pisz_2(char *tekst, int8_t dlugosc)
{
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	16 2f       	mov	r17, r22
	ustawKursor(1,0);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 9a 00 	call	0x134	; 0x134 <ustawKursor>
	napisz(tekst, dlugosc);
 1d2:	61 2f       	mov	r22, r17
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 b1 00 	call	0x162	; 0x162 <napisz>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <main>:




int main(void)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	2d 97       	sbiw	r28, 0x0d	; 13
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
	char tekst[] = {'b','U','b','L','i','N'};
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	e0 e6       	ldi	r30, 0x60	; 96
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	de 01       	movw	r26, r28
 1fe:	11 96       	adiw	r26, 0x01	; 1
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x1e>
	char tekst2[] = {'j','E','c','H','a','N','e'};
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	e6 e6       	ldi	r30, 0x66	; 102
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	de 01       	movw	r26, r28
 210:	17 96       	adiw	r26, 0x07	; 7
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x30>
	inicjalizacjaLCD();
 21a:	0e 94 79 00 	call	0xf2	; 0xf2 <inicjalizacjaLCD>
	pisz_1(tekst,6);
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 cf 00 	call	0x19e	; 0x19e <pisz_1>
	pisz_2(tekst2, 7);
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	ce 01       	movw	r24, r28
 22c:	07 96       	adiw	r24, 0x07	; 7
 22e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <pisz_2>
 232:	ff cf       	rjmp	.-2      	; 0x232 <main+0x50>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
